!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BONUS	Makefile	/^BONUS	= ft_lstnew.c		\\$/;"	m
BONUS_OBJS	Makefile	/^BONUS_OBJS	= ${BONUS:.c=.o}$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -c$/;"	m
EXTRA	Makefile	/^EXTRA	= ft_lstnew.c		\\$/;"	m
EXTRA_OBJS	Makefile	/^EXTRA_OBJS	= ${EXTRA:.c=.o}$/;"	m
FAIL	other/tests.c	/^#define FAIL(/;"	d	file:
LIBFT_H	libft.h	/^# define LIBFT_H$/;"	d
MAX	other/tests.c	/^#define	MAX /;"	d	file:
MIN	other/tests.c	/^#define	MIN /;"	d	file:
NAME	Makefile	/^NAME = libft.a$/;"	m
OBJS	Makefile	/^OBJS = ${SRCS:.c=.o}$/;"	m
RM	Makefile	/^RM = rm -f$/;"	m
SRCS	Makefile	/^SRCS	= ft_atoi.c			\\$/;"	m
TESTS	other/tests.c	/^#define TESTS /;"	d	file:
TIC	other/tests.c	/^#define TIC(/;"	d	file:
TOC	other/tests.c	/^#define TOC(/;"	d	file:
_assert	other/tests.c	/^#define _assert(/;"	d	file:
_verify	other/tests.c	/^#define _verify(/;"	d	file:
all_tests	other/tests.c	/^int	all_tests()$/;"	f
content	libft.h	/^	void			*content;$/;"	m	struct:s_list
content	other/testing/ft_lstsandbox.c	/^	void			*content;$/;"	m	struct:s_list	file:
ft_abs	ft_abs.c	/^int	ft_abs(int nb)$/;"	f
ft_allocsize	ft_strtrim.c	/^static size_t	ft_allocsize(char const *s1, char const *set)$/;"	f	file:
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_atoi	other/testing/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_backfree	ft_split.c	/^static void	*ft_backfree(char **tab, int i)$/;"	f	file:
ft_bzero	ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_bzero	other/testing/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_count	ft_split.c	/^static size_t	ft_count(char const *s, char c)$/;"	f	file:
ft_fill	ft_split.c	/^static char	*ft_fill(char const *s, char c)$/;"	f	file:
ft_intlen	ft_itoa.c	/^static size_t	ft_intlen(long ln)$/;"	f	file:
ft_isalnum	ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isdigit	other/testing/ft_atoi.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	ft_atoi.c	/^static int	ft_isspace(int c)$/;"	f	file:
ft_isspace	other/testing/ft_atoi.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_back	other/testing/ft_lstsandbox.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstadd_front	other/testing/ft_lstsandbox.c	/^void ft_lstadd_front(t_list **alst, t_list *new)$/;"	f
ft_lstclear	ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f
ft_lstdelone	ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstdelone	other/testing/ft_lstsandbox.c	/^void	ft_lstdelone(t_list *lst)$/;"	f
ft_lstiter	ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstlast	other/testing/ft_lstsandbox.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstnew	other/testing/ft_lstsandbox.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstprint	other/testing/ft_lstsandbox.c	/^void ft_lstprint(t_list *lst)$/;"	f
ft_lstsize	ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_lstsize	other/testing/ft_lstsandbox.c	/^int ft_lstsize(t_list *lst)$/;"	f
ft_matchset	ft_strtrim.c	/^static int	ft_matchset(char c1, const char *set)$/;"	f	file:
ft_max	ft_max.c	/^int	ft_max(int a, int b)$/;"	f
ft_memchr	ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memchr	other/testing/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcmp	other/testing/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memcpy	other/testing/ft_memcpy.c	/^void	*ft_memcpy(void *dst, const void *src, size_t n)$/;"	f
ft_memmove	ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memmove	other/testing/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_memset	other/testing/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_min	ft_min.c	/^int	ft_min(int a, int b)$/;"	f
ft_putchar_fd	ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_shield	ft_strtrim.c	/^static int	ft_shield(char const *s1, char const *set)$/;"	f	file:
ft_split	ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strcat	other/testing/ft_strcat.c	/^char *ft_strcat(char *dest, const char *src)$/;"	f
ft_strchr	ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strchr	other/testing/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strcpy	other/testing/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdup	ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_striteri	ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcat	other/testing/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlcpy	other/testing/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	other/testing/ft_strlcat.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strlen	other/testing/ft_strlcpy.c	/^int	ft_strlen(char *str)$/;"	f
ft_strmapi	ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncmp	other/testing/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnlen	ft_strlcat.c	/^static size_t	ft_strnlen(const char *s, size_t n)$/;"	f	file:
ft_strnstr	ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strnstr	other/testing/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrchr	other/testing/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
main	other/testing/ft_atoi.c	/^int main(void)$/;"	f
main	other/testing/ft_lstsandbox.c	/^int	main(void)$/;"	f
main	other/testing/ft_memchr.c	/^int	main()$/;"	f
main	other/testing/ft_memcmp.c	/^int	main()$/;"	f
main	other/testing/ft_memcpy.c	/^int	main(void)$/;"	f
main	other/testing/ft_memmove.c	/^int	main(void)$/;"	f
main	other/testing/ft_strcat.c	/^int	main(void)$/;"	f
main	other/testing/ft_strchr.c	/^int	main(void)$/;"	f
main	other/testing/ft_strcpy.c	/^int	main(void)$/;"	f
main	other/testing/ft_strlcat.c	/^int main()$/;"	f
main	other/testing/ft_strlcpy.c	/^int	main(void)$/;"	f
main	other/testing/ft_strncmp.c	/^int	main(void)$/;"	f
main	other/testing/ft_strnstr.c	/^int	main(void)$/;"	f
main	other/tests.c	/^int	main() {$/;"	f
next	libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
next	other/testing/ft_lstsandbox.c	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list	file:
s_list	libft.h	/^typedef struct s_list$/;"	s
s_list	other/testing/ft_lstsandbox.c	/^typedef struct s_list$/;"	s	file:
strgen	other/tests.c	/^char	*strgen(int size)$/;"	f
strgen_old	other/tests.c	/^char *strgen_old(int size)$/;"	f
t_list	libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_list	other/testing/ft_lstsandbox.c	/^}	t_list;$/;"	t	typeref:struct:s_list	file:
test_ft_atoi	other/tests.c	/^int	test_ft_atoi()$/;"	f
test_ft_bzero	other/tests.c	/^int	test_ft_bzero()$/;"	f
test_ft_calloc	other/tests.c	/^int test_ft_calloc()$/;"	f
test_ft_isalnum	other/tests.c	/^int	test_ft_isalnum()$/;"	f
test_ft_isascii	other/tests.c	/^int	test_ft_isascii()$/;"	f
test_ft_isdigit	other/tests.c	/^int	test_ft_isdigit()$/;"	f
test_ft_isprint	other/tests.c	/^int	test_ft_isprint()$/;"	f
test_ft_memchr	other/tests.c	/^int	test_ft_memchr()$/;"	f
test_ft_memcmp	other/tests.c	/^int	test_ft_memcmp()$/;"	f
test_ft_memcpy	other/tests.c	/^int	test_ft_memcpy()$/;"	f
test_ft_memmove	other/tests.c	/^int	test_ft_memmove()$/;"	f
test_ft_memset	other/tests.c	/^int	test_ft_memset()$/;"	f
test_ft_strchr	other/tests.c	/^int	test_ft_strchr()$/;"	f
test_ft_strdup	other/tests.c	/^int test_ft_strdup()$/;"	f
test_ft_strlcat	other/tests.c	/^int	test_ft_strlcat()$/;"	f
test_ft_strlcpy	other/tests.c	/^int	test_ft_strlcpy()$/;"	f
test_ft_strlen	other/tests.c	/^int	test_ft_strlen()$/;"	f
test_ft_strncmp	other/tests.c	/^int	test_ft_strncmp()$/;"	f
test_ft_strnstr	other/tests.c	/^int	test_ft_strnstr()$/;"	f
test_ft_strrchr	other/tests.c	/^int	test_ft_strrchr()$/;"	f
test_ft_tolower	other/tests.c	/^int	test_ft_tolower()$/;"	f
test_ft_toupper	other/tests.c	/^int test_ft_toupper()$/;"	f
test_isalpha	other/tests.c	/^int	test_isalpha()$/;"	f
tests_run	other/tests.c	/^int	tests_run = 0;$/;"	v
